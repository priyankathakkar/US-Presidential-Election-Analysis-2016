Add Dependecy Jar for JSONSerDe
add jar /home/cloudera/Downloads/json-serde-1.3.6-jar-with-dependencies.jar;
-----------------------------------------------------------------------------------

1)Creating a Table that stores the streamed tweets in a structured format 

CREATE EXTERNAL TABLE TweetsTabletest (
  id BIGINT,
  created_at STRING,
  favorited BOOLEAN,
  retweeted_status STRUCT<
    text:STRING,
    user:STRUCT<id:BIGINT,screen_name:STRING,name:STRING>,
    retweet_count:BIGINT>,
  entities STRUCT<
    urls:ARRAY<STRUCT<expanded_url:STRING>>,
    user_mentions:ARRAY<STRUCT<screen_name:STRING,name:STRING>>,
    hashtags:ARRAY<STRUCT<text:STRING>>>,
  text STRING,
  user STRUCT<
    id:BIGINT,
    screen_name:STRING,
    name:STRING,
    location:STRING,
    friends_count:BIGINT,
    followers_count:BIGINT,
    statuses_count:BIGINT,
    verified:BOOLEAN,
    utc_offset:BIGINT,
    time_zone:STRING>,
  in_reply_to_status_id STRING,
  in_reply_to_screen_name STRING,
 in_reply_to_user_id BIGINT
) 
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
WITH SERDEPROPERTIES ("ignore.malformed.json" = "false")
LOCATION '/user/cloudera/project';

-------------------------------------------------------------------------------------------------------
2)Query for counting total number of tweets per candidate, for which location is mentioned.

select in_reply_to_screen_name, count(in_reply_to_screen_name) as count1 from tweetstable where user.location is not null group by in_reply_to_screen_name  order by count1 desc limit 10;

--------------------------------------------------------------------------------------------------------

3)Creating a table which holds static information regarding candidates for Join Purpose in future queries.

CREATE EXTERNAL TABLE PRESIDENTIAL_CANDIDATES (
twitter_name STRING,
id BIGINT,
name STRING,
party STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' 
STORED AS TEXTFILE
LOCATION '/user/cloudera/President';

---------------------------------------------------------------------------------------------------------

4)Creating a table that holds possible TimeZones in the USA with all its possible abbreviations

CREATE EXTERNAL TABLE TIME_ZONE (
zone STRING)
STORED AS TEXTFILE
LOCATION '/user/cloudera/TimeZone';

----------------------------------------------------------------------------------------------------------

5)Creating a table dictionary that is built from the hortonworks dictionary.

CREATE EXTERNAL TABLE dictionary (
    type string,
    length int,
    word string,
    pos string,
    stemmed string,
    polarity string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
STORED AS TEXTFILE
LOCATION '/user/cloudera/dictionary'
----------------------------------------------------------------------------------------------------------
6)Creating a table that has timezone as mentioned( validity checking)

Create table tweets_timezone as select * from tweetstable t where t.user.time_zone in (select zone from time_zone); 

//Creating a new table for filtering as some unexpected tweets (random users) have occured

Create table tweets_candidates as select * from tweets_timezone t where t.in_reply_to_user_id in (select id from presidential_candidates);

----------------------------------------------------------------------------------------------------------

7)Creating a new table as filtering out where location is not mentioned as we need location for future groupings

create table tweets_candidates_loc as selectscore id,created_at,text,user.location,user.time_zone,in_reply_to_status_id,in_reply_to_screen_name,in_reply_to_user_id from tweets_candidates where user.location is not null;

-------------------------------------------------------------------------------------------------------------

8)Creating a table for determining 2 Letters State names from the location the user have mentioned.

 create  table tweets_candidates_loc_state as select * from tweets_candidates_loc where user.location is not null;

 alter table tweets_candidates_loc_state add columns (state STRING);

insert overwrite table tweets_candidates_loc_state
select id,created_at,text,location,time_zone,in_reply_to_status_id,in_reply_to_screen_name,in_reply_to_user_id,CASE 
 when lower(location) like "%california%" or location like "% CA%" then "CA" 
 when lower(location) like "%new york%" or location like "% NY%" then "NY" 
 when lower(location) like "%alabama%" or  location like "% AL%" then "AL"
 when lower(location) like "%alaska%" or location like "% AK%" then "AK"
 when lower(location) like "%arizona%" or location like "% AZ%" then "AZ"
 when lower(location) like "%arkansas%" or location like "% AR%" then "AR"
 when lower(location) like "%colorado%" or location like "% CO%" then "CO"
 when lower(location) like "%connecticut%" or location like "% CT%" then "CT"
 when lower(location) like "%columbia%" or location like "% DC%" or location like "% D.C%" then "DC"
 when lower(location) like "%delware%" or location like "% DE%" then "DE"
 when lower(location) like "%florida%" or location like "% FL%" then "FL" 
 when lower(location) like "%georgia%" or location like "% GA%" then "GA" 
 when lower(location) like "%hawaii%" or location like "% HI%" then "HI" 
 when lower(location) like "%idaho%" or location like "% ID%" then "ID"
 when lower(location) like "%illinois%" or location like "% IL%" then "IL"
 when lower(location) like "%indiana%" or location like "% IN%" then "IN"
 when lower(location) like "%iowa%" or location like "% IA%" then "IA"
 when lower(location) like "%kansas%" or location like "% KS%" then "KS"
 when lower(location) like "%kentucky%" or location like "% KY%" then "KY"
 when lower(location) like "%louisiana%" or location like "% LA%" then "LA"
 when lower(location) like "%maine%" or location like "% ME%" then "ME"
 when lower(location) like "%maryland%" or location like "% MD%" then "MD"
 when lower(location) like "%massachusetts%" or location like "% MA%" then "MA" 
 when lower(location) like "%michigan%" or location like "% MI%" then "MI" 
 when lower(location) like "%minnesota%" or location like "% MN%" then "MN"
 when lower(location) like "%mississippi%" or location like "% MS%" then "MS"
 when lower(location) like "%missouri%" or location like "% MO%" then "MO"
 when lower(location) like "%montana%" or location like "% MT%" then "MT"
 when lower(location) like "%nebraska%" or location like "% NE%" then "NE"
 when lower(location) like "%nevada%" or location like "% NV%" then "NV"
 when lower(location) like "%new hampshire%" or location like "% NH%" then "NH"
 when lower(location) like "%new jersey%" or location like "% NJ%" then "NJ"
 when lower(location) like "%new mexico%" or location like "% NM%" then "NM" 
 when lower(location) like "%north carolina%" or location like "% NC%" then "NC" 
 when lower(location) like "%north dakota%" or location like "% ND%" then "ND"
 when lower(location) like "%ohio%" or location like "% OH%" then "OH"
 when lower(location) like "%oklahoma%"or location like "% OK%" then "OK"
 when lower(location) like "%oregon%" or location like "% OR%" then "OR"
 when lower(location) like "%pennsylvania%" or location like "% PA%" then "PA"
 when lower(location) like "%rhode island%" or location like "% RI%" then "RI"
 when lower(location) like "%south carolina%" or location like "% SC%" then "SC"
 when lower(location) like "%south dakota%" or location like "% SD%" then "SD"
 when lower(location) like "%tennessee%" or  location like "% TN%" then "TN" 
 when lower(location) like "%texas%" or location like "% TX%" then "TX" 
 when lower(location) like "%utah%" or location like "% UT%" then "UT"
 when lower(location) like "%vermont%" or location like "% VT%" then "VT"
 when lower(location) like "%virginia%" or location like "% VA%" then "VA"
 when lower(location) like "%washington%" or location like "% WA%" then "WA"
 when lower(location) like "%west virginia%" or location like "% WV%" then "WV"
 when lower(location) like "%wisconsin%" or location like "% WI%" then "WI"
 when lower(location) like "%wyoming%" or location like "% WY%" then "WY"
 else null end as loc
from tweets_candidates_loc


----------------------------------------------------------------------------------------------------------------------------

9)creating views for Sentiment Analysis

//Exploding a sentence
create view l1 as select id, words from tweets_candidates_loc lateral view explode(sentences(lower(text))) dummy as words;

create view l2 as select id, word from l1 lateral view explode( words ) dummy as word ;


create view IF NOT EXISTS l3 as select 
    id, 
    l2.word, 
    case d.polarity 
      when  'negative' then -1
      when 'positive' then 1 
      else 0 end as polarity 
 from l2 left outer join dictionary d on l2.word = d.word;

//collectively counting the final sentiment for a tweet

create table tweets_sentiment 
  stored as orc as 
  select 
  id, 
  case 
    when sum( polarity ) > 0 then 'positive' 
    when sum( polarity ) < 0 then 'negative'  
    else 'neutral' end as sentiment 
 from l3 group by id;

--------------------------------------------------------------------------------------------------------------------------------

10)Creating a final tweet table which has all required attributes and as well as the sentiment.

CREATE TABLE final_tweets 
STORED AS ORC
AS
SELECT 
  t.*,
  case s.sentiment 
    when 'positive' then 1 
    when 'neutral' then 0
    when 'negative' then -1 
  end as sentiment  
FROM tweets_candidates_loc_state t LEFT OUTER JOIN tweets_sentiment s on t.id = s.id;

--------------------------------------------------------------------------------------------------------------------------------

11)Counting number of +ve, -ve and neutral tweets per candidate per state

select in_reply_to_screen_name,state,sum(if(sentiment = 0,0,1)),sum(if(sentiment=1,0,1)),sum(if(sentiment =-1,0,1)) from final_tweets group by state, in_reply_to_screen_name;

---------------------------------------------------------------------------------------------------------------------------------

12)Creating a table which maps timezones to the countries worldwide

CREATE EXTERNAL TABLE time_zone_map (
    time_zone string,
    country string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
STORED AS TEXTFILE
LOCATION '/user/cloudera/TimeZoneMap';

--------------------------------------------------------------------------------------------------------------------------------
13)Other than US Popularity

CREATE VIEW tweets_country AS
SELECT
  id,
  user.id as user_id,
  user.screen_name as user_name,
  text as tweet,
  user.time_zone as time_zone,
  m.country as country,
  in_reply_to_status_id, 
  in_reply_to_user_id,
  in_reply_to_screen_name
FROM tweetstable LEFT OUTER JOIN time_zone_map as m on (m.time_zone = user.time_zone);


//Counting number of tweets per user per country (without sentiments)

select country, in_reply_to_screen_name, count(*) as count_country from tweets_country
where in_reply_to_user_id in (25073877,1339835893,216776631,23022687,18020081)
group by in_reply_to_screen_name,country having country <> 'NULL' order by count_country desc;

select country, count(*) as count_country from tweets_country
where in_reply_to_user_id in (25073877,1339835893,216776631,23022687,18020081)
group by country having country <> 'NULL' order by count_country desc;


----------------------------------------------------------------------------------------
14)State wise prediction

Table for counting the statewise neutral,positive and negative tweet count per candidate.

CREATE  TABLE count_analytic (
    name string,
    state string,
    neutral int,
    positive int,
    negative int

)
insert overwrite table count_analytic select  in_reply_to_screen_name,state,sum(if(sentiment = 0,0,1)),sum(if(sentiment=1,0,1)),sum(if(sentiment =-1,0,1)) from final_tweets group by state, in_reply_to_screen_name;

alter table count_analytic add columns (Score double);

//Calculating Score 

insert overwrite table count_analytic select name,state,neutral,positive,negative, ((positive/(positive+negative+neutral))*100) + ((neutral/(positive+negative+neutral))*100*0.33) + ((positive+negative+neutral)*0.12) as score from count_analytic;


create table prediction_statewise as
select c.state,c.name,c.score from
count_analytic c join max_score m on c.state=m.state where c.score = m.score;


select * from prediction_statewise


----------------------------------------------------------------------------------------------------------------------------------------
15)Analyzing NY Primary

CREATE view final_tweets_NY 
AS
SELECT 
  t.*,
  case s.sentiment 
    when 'positive' then 1 
    when 'neutral' then 0
    when 'negative' then -1 
  end as sentiment  
FROM tweets_candidates_loc_state t LEFT OUTER JOIN tweets_sentiment s on t.id = s.id where state = "NY";

CREATE  TABLE count_analytic_NY_before_2 (
    name string,
    state string,
    neutral int,
    positive int,
    negtive int

)

insert overwrite table count_analytic_NY_before_2
select in_reply_to_screen_name,state,sum(if(sentiment = 0,0,1)),sum(if(sentiment=1,0,1)),sum(if(sentiment =-1,0,1)) from final_tweets_NY  where  created_at like "Wed Apr 06%" or created_at like "Thu Apr 07%" or created_at like "Fri Apr 08%" or created_at like "Sat Apr 09%" or created_at like "Sun Apr 10%" or created_at like "Mon Apr 11%" or created_at like "Tue Apr 12%" or created_at like "Wed Apr 13%" group by in_reply_to_screen_name,state;

alter table count_analytic_NY_before_2 add columns (Score double);

insert overwrite table count_analytic_NY_before_2 select name,state,neutral,positive,negtive, ((positive/(positive+negtive+neutral))*100) + ((neutral/(positive+negtive+neutral))*100*0.33) + ((positive+negtive+neutral)*0.12) as score from count_analytic_NY_before_2;


CREATE  TABLE count_analytic_NY_before_1 (
    name string,
    state string,
    neutral int,
    positive int,
    negtive int

)

insert overwrite table count_analytic_NY_before_1
select in_reply_to_screen_name,state,sum(if(sentiment = 0,0,1)),sum(if(sentiment=1,0,1)),sum(if(sentiment =-1,0,1))
 from final_tweets_NY  where  created_at like "Wed Apr 13%" or created_at like "Thu Apr 14%" or created_at like "Fri Apr 15%" or created_at like "Sat Apr 16%" or created_at like "Sun Apr 17%" or created_at like "Mon Apr 18%" or created_at like "Tue Apr 19%" or created_at like "Wed Apr 20%" group by in_reply_to_screen_name,state;

alter table count_analytic_NY_before_1 add columns (Score double);

insert overwrite table count_analytic_NY_before_1 select name,state,neutral,positive,negtive, ((positive/(positive+negtive+neutral))*100) + ((neutral/(positive+negtive+neutral))*100*0.33) + ((positive+negtive+neutral)*0.12) as score from count_analytic_NY_before_1;


-------------------------------------------------------------------------------------------------------------------------------------
16)Tweets only from India

create view tweets_country_India as select * from tweets_country where country like '%INDIA%';

Sentiment Analysis of Tweets from India

create view india1 as select id, words from tweets_candidates_loc lateral view explode(sentences(lower(text))) dummy as words;

create view india2 as select id, word from india1 lateral view explode( words ) dummy as word ;


create view IF NOT EXISTS india3 as select 
    id, 
    india2.word, 
    case d.polarity 
      when  'negative' then -1
      when 'positive' then 1 
      else 0 end as polarity 
 from india2 left outer join dictionary d on india2.word = d.word;

create table tweets_sentiment_india 
  stored as orc as 
  select 
  id, 
  case 
    when sum( polarity ) > 0 then 'positive' 
    when sum( polarity ) < 0 then 'negative'  
    else 'neutral' end as sentiment 
 from india3 group by id;

CREATE TABLE final_tweets_india 
STORED AS ORC
AS
SELECT 
  t.*,
  case s.sentiment 
    when 'positive' then 1 
    when 'neutral' then 0
    when 'negative' then -1 
  end as sentiment  
FROM tweets_country_India t LEFT OUTER JOIN tweets_sentiment_india s on t.id = s.id;

CREATE  TABLE count_analytic_India (
    name string,
    neutral int,
    positive int,
    negtive int

)

insert overwrite table count_analytic_India
select in_reply_to_screen_name,sum(if(sentiment = 0,0,1)),sum(if(sentiment=1,0,1)),sum(if(sentiment =-1,0,1))
 from final_tweets_india group by in_reply_to_screen_name;

alter table count_analytic_India add columns (Score double);

insert overwrite table count_analytic_India select name,neutral,positive,negtive, ((positive/(positive+negtive+neutral))*100) + ((neutral/(positive+negtive+neutral))*100*0.33) + ((positive+negtive+neutral)*0.12) as score from count_analytic_India;

-----------------------------------------------------------------------------------------------------------

END

